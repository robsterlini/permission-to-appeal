/**
 * Mixins SCSS File
 */

@mixin cf() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
	*zoom: 1;
}

@mixin cover($type: 'absolute') {
	height:100%;
	left:0;
	position: $type;
	top:0;
	width:100%;
}

@mixin max-height($bp) {
	$unit: em($bp, 16);
	@media only screen and (max-height: $unit) {
		@content;
	}
}

@mixin min-height($bp) {
	$unit: em($bp, 16);
	@media only screen and (min-height: $unit) {
		@content;
	}
}

@mixin max-width($bp) {
	$unit: em($bp, 16);
	@media only screen and (max-width: $unit) {
		@content;
	}
}
@mixin min-width($bp) {
	$unit: em($bp + 1, 16);
	@media only screen and (min-width: $unit) {
		@content;
	}
}

@mixin aspect-ratio($x, $y, $type: "max") {
	$query: '';
	@if $type == 'min' {
		$query: 'min-aspect-ratio';
	} @else {
		$query: 'max-aspect-ratio';
	}
	@media ($query: #{$x}/#{$y}) {
		@content;
	}
}

@mixin hover {
	&:focus,
	&:hover,
	&:active {
		.hover & {
			@content;
		}
	}
}

@mixin active {
	&:active {
		.hover & {
			@content;
		}
	}
}


/**
 * Creates social coloured buttons as .btn or .btn--outline or both using the brand
 * colours defined within framework/_color.scss
 *
 * @param string 	$c		The colour you want to use (hex or Sass variable).
 * @param bool 		$b 		This boolean creates styling for the .btn variant 						[default: true]
 * @param bool 		$o 		This boolean creates styling for the .btn--outline variant 		[default: true]
 * @param int 		$p 		The percentage you want to darken the button on over 					[default: 12%]
**/

@mixin social-color($c, $b: true, $o: true, $p: 12%) {
	@if $b == true {
		&.btn {
			background-color: $c;
			border-color: $c;
			@include hover {
				// background-color: darken($c, $p);
				border-color: $c;
				color: $c;
				fill: $c;
			}
		}
	}
	@if $o == true {
		&.btn--outline {
			color: $c;
			border-color: $c;
			@include hover {
				color: darken($c, $p);
				border-color: darken($c, $p);
			}
		}
	}
}